/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/toposort-class";
exports.ids = ["vendor-chunks/toposort-class"];
exports.modules = {

/***/ "(action-browser)/../node_modules/toposort-class/build/toposort.js":
/*!********************************************************!*\
  !*** ../node_modules/toposort-class/build/toposort.js ***!
  \********************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/****\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 Gustavo Henke and Aaron Trent\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n ****/\n(function( global, factory ) {\n    if( true ) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else { var mod; }\n})( this, function( exports, module ) {\n    \"use strict\";\n\n    function _classCallCheck( instance, Constructor ) {\n        if( !(instance instanceof Constructor) ) {\n            throw new TypeError( \"Cannot call a class as a function\" );\n        }\n    }\n\n    var Toposort = (function() {\n        function Toposort() {\n            _classCallCheck( this, Toposort );\n\n            this.edges = [];\n            this.Toposort = Toposort;\n        }\n\n        /**\n         * Adds dependency edges.\n         *\n         * @since   0.1.0\n         * @param   {String} item               An dependent name. Must be an string and not empty\n         * @param   {String[]|String} [deps]    An dependency or array of dependencies\n         * @returns {Toposort}                  The Toposort instance\n         */\n\n        Toposort.prototype.add = function add( item, deps ) {\n            if( typeof item !== \"string\" || !item ) {\n                throw new TypeError( \"Dependent name must be given as a not empty string\" );\n            }\n\n            deps = Array.isArray( deps ) ? deps : [deps];\n\n            if( deps.length > 0 ) {\n                for( var _iterator = deps, _isArray = Array.isArray( _iterator ), _i = 0, _iterator = _isArray ?\n                                                                                                      _iterator :\n                                                                                                      _iterator[Symbol.iterator](); ; ) {\n                    var _ref;\n\n                    if( _isArray ) {\n                        if( _i >= _iterator.length ) {\n                            break;\n                        }\n                        _ref = _iterator[_i++];\n                    } else {\n                        _i = _iterator.next();\n                        if( _i.done ) {\n                            break;\n                        }\n                        _ref = _i.value;\n                    }\n\n                    var dep = _ref;\n\n                    if( typeof dep !== \"string\" || !dep ) {\n                        throw new TypeError( \"Dependency name must be given as a not empty string\" );\n                    }\n\n                    this.edges.push( [item, dep] );\n                }\n            } else {\n                this.edges.push( [item] );\n            }\n\n            return this;\n        };\n\n        /**\n         * Runs the toposorting and return an ordered array of strings\n         *\n         * @since   0.1.0\n         * @returns {String[]}  The list of items topologically sorted.\n         */\n\n        Toposort.prototype.sort = function sort() {\n            var _this = this;\n\n            var nodes = [];\n\n            //accumulate unique nodes into a large list\n            for( var _iterator2 = this.edges, _isArray2 = Array.isArray( _iterator2 ), _i2 = 0, _iterator2 = _isArray2 ?\n                                                                                                             _iterator2 :\n                                                                                                             _iterator2[Symbol.iterator](); ; ) {\n                var _ref2;\n\n                if( _isArray2 ) {\n                    if( _i2 >= _iterator2.length ) {\n                        break;\n                    }\n                    _ref2 = _iterator2[_i2++];\n                } else {\n                    _i2 = _iterator2.next();\n                    if( _i2.done ) {\n                        break;\n                    }\n                    _ref2 = _i2.value;\n                }\n\n                var edge = _ref2;\n\n                for( var _iterator3 = edge, _isArray3 = Array.isArray( _iterator3 ), _i3 = 0, _iterator3 = _isArray3 ?\n                                                                                                           _iterator3 :\n                                                                                                           _iterator3[Symbol.iterator](); ; ) {\n                    var _ref3;\n\n                    if( _isArray3 ) {\n                        if( _i3 >= _iterator3.length ) {\n                            break;\n                        }\n                        _ref3 = _iterator3[_i3++];\n                    } else {\n                        _i3 = _iterator3.next();\n                        if( _i3.done ) {\n                            break;\n                        }\n                        _ref3 = _i3.value;\n                    }\n\n                    var node = _ref3;\n\n                    if( nodes.indexOf( node ) === -1 ) {\n                        nodes.push( node );\n                    }\n                }\n            }\n\n            //initialize the placement of nodes into the sorted array at the end\n            var place = nodes.length;\n\n            //initialize the sorted array with the same length as the unique nodes array\n            var sorted = new Array( nodes.length );\n\n            //define a visitor function that recursively traverses dependencies.\n            var visit = function visit( node, predecessors ) {\n                //check if a node is dependent of itself\n                if( predecessors.length !== 0 && predecessors.indexOf( node ) !== -1 ) {\n                    throw new Error( \"Cyclic dependency found. \" + node + \" is dependent of itself.\\nDependency chain: \"\n                                     + predecessors.join( \" -> \" ) + \" => \" + node );\n                }\n\n                var index = nodes.indexOf( node );\n\n                //if the node still exists, traverse its dependencies\n                if( index !== -1 ) {\n                    var copy = false;\n\n                    //mark the node as false to exclude it from future iterations\n                    nodes[index] = false;\n\n                    //loop through all edges and follow dependencies of the current node\n                    for( var _iterator4 = _this.edges, _isArray4 = Array.isArray( _iterator4 ), _i4 = 0, _iterator4 = _isArray4 ?\n                                                                                                                      _iterator4 :\n                                                                                                                      _iterator4[Symbol.iterator](); ; ) {\n                        var _ref4;\n\n                        if( _isArray4 ) {\n                            if( _i4 >= _iterator4.length ) {\n                                break;\n                            }\n                            _ref4 = _iterator4[_i4++];\n                        } else {\n                            _i4 = _iterator4.next();\n                            if( _i4.done ) {\n                                break;\n                            }\n                            _ref4 = _i4.value;\n                        }\n\n                        var edge = _ref4;\n\n                        if( edge[0] === node ) {\n                            //lazily create a copy of predecessors with the current node concatenated onto it\n                            copy = copy || predecessors.concat( [node] );\n\n                            //recurse to node dependencies\n                            visit( edge[1], copy );\n                        }\n                    }\n\n                    //add the node to the next place in the sorted array\n                    sorted[--place] = node;\n                }\n            };\n\n            for( var i = 0; i < nodes.length; i++ ) {\n                var node = nodes[i];\n\n                //ignore nodes that have been excluded\n                if( node !== false ) {\n                    //mark the node as false to exclude it from future iterations\n                    nodes[i] = false;\n\n                    //loop through all edges and follow dependencies of the current node\n                    for( var _iterator5 = this.edges, _isArray5 = Array.isArray( _iterator5 ), _i5 = 0, _iterator5 = _isArray5 ?\n                                                                                                                     _iterator5 :\n                                                                                                                     _iterator5[Symbol.iterator](); ; ) {\n                        var _ref5;\n\n                        if( _isArray5 ) {\n                            if( _i5 >= _iterator5.length ) {\n                                break;\n                            }\n                            _ref5 = _iterator5[_i5++];\n                        } else {\n                            _i5 = _iterator5.next();\n                            if( _i5.done ) {\n                                break;\n                            }\n                            _ref5 = _i5.value;\n                        }\n\n                        var edge = _ref5;\n\n                        if( edge[0] === node ) {\n                            //recurse to node dependencies\n                            visit( edge[1], [node] );\n                        }\n                    }\n\n                    //add the node to the next place in the sorted array\n                    sorted[--place] = node;\n                }\n            }\n\n            return sorted;\n        };\n\n        /**\n         * Clears edges\n         *\n         * @since   0.4.0\n         * @returns {Toposort}                  The Toposort instance\n         */\n\n        Toposort.prototype.clear = function clear() {\n            this.edges = [];\n\n            return this;\n        };\n\n        return Toposort;\n    })();\n\n    module.exports = Toposort;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../node_modules/toposort-class/build/toposort.js\n");

/***/ }),

/***/ "(action-browser)/../node_modules/toposort-class/index.js":
/*!***********************************************!*\
  !*** ../node_modules/toposort-class/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./build/toposort.js */ \"(action-browser)/../node_modules/toposort-class/build/toposort.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvdG9wb3NvcnQtY2xhc3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsb0lBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4uL25vZGVfbW9kdWxlcy90b3Bvc29ydC1jbGFzcy9pbmRleC5qcz9mMmUyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSggJy4vYnVpbGQvdG9wb3NvcnQuanMnICk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../node_modules/toposort-class/index.js\n");

/***/ })

};
;